from collections import deque

N, M = input().split()
N = int(N)
M = int(M)

map = [list(map(int, input())) for _ in range(N)]
visit = [[False]*M for _ in range(N)]

dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]

order = deque()
order.append((0, 0, 1))
visit[0][0] = True

isEnd = False
def bfs():
    global isEnd

    xyc = order.popleft()
    x= xyc[0]
    y = xyc[1]
    c = xyc[2]

    if x == N-1 and y == M-1:
        print(c)
        isEnd = True
        return

    for i in range(4):
        mx = x + dx[i]
        my = y + dy[i]

        if 0 <= mx and mx < N and 0 <= my and my < M:
            if visit[mx][my] == False and map[mx][my] == 1:
                visit[mx][my] = True
                order.append((mx, my, c + 1))

    if len(order) > 0 and isEnd == False:
        bfs()

bfs()
